package mirogaudi.memo.domain

import com.fasterxml.jackson.annotation.JsonGetter
import com.fasterxml.jackson.annotation.JsonIgnore
import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.EnumType
import jakarta.persistence.Enumerated
import jakarta.persistence.FetchType
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.JoinColumn
import jakarta.persistence.JoinTable
import jakarta.persistence.ManyToMany
import jakarta.persistence.Table
import jakarta.validation.constraints.NotEmpty
import jakarta.validation.constraints.Size
import org.hibernate.Hibernate
import java.time.LocalDateTime

@Entity
@Table(name = "memo")
data class Memo(

    // to be generated by DB
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    val id: Long? = null,

    @Column(name = "text", nullable = false)
    @field:NotEmpty
    @field:Size(min = 3, max = 1024)
    var text: String,

    @Column(name = "priority")
    @Enumerated(EnumType.STRING)
    var priority: Priority? = null,

    @Column(name = "created_date", nullable = false)
    var createdDate: LocalDateTime? = null,

    @Column(name = "due_date")
    var dueDate: LocalDateTime? = null,

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
        name = "memo_label",
        joinColumns = [JoinColumn(name = "memo_id", referencedColumnName = "id")],
        inverseJoinColumns = [JoinColumn(name = "label_id", referencedColumnName = "id")]
    )
    @JsonIgnore
    var labels: MutableSet<Label> = mutableSetOf()
) {
    @JsonGetter
    fun labelNames(): List<String> {
        return labels.map { it.name }
            .sorted()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || Hibernate.getClass(this) != Hibernate.getClass(other)) return false
        other as Memo

        return id != null && id == other.id
    }

    override fun hashCode(): Int = javaClass.hashCode()

    @Override
    override fun toString(): String {
        return this::class.simpleName +
            "(id = $id , text = $text , priority = $priority , createdDate = $createdDate , dueDate = $dueDate )"
    }
}

enum class Priority {
    LONG_TERM,
    MID_TERM,
    SHORT_TERM
}
